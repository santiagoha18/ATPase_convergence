ggplot(.,aes(x=groups,y=rho_cor)) +
geom_point(shape=21,fill="black",aes(size=-log(p_val))) +
#scale_fill_gradientn(colours = viridis::viridis(20)) +
geom_line(aes(x=groups,y=rho_cor)) +
geom_bar(aes(x=groups,y=number_sites*0.026), stat="identity", size=.1, color="black", alpha=.4) + # 0.013 = max(rho) / max(number_sites)
labs(x="Group",y=expression(rho),size="-log(P-value)") +
theme(
panel.background = element_rect(fill = "white",colour = "white"),
panel.border = element_rect(linetype = 1, fill = NA),
panel.grid.major = element_line(),
axis.text.x = element_text(face="bold", size=13),
axis.text.y = element_text(face="bold", size=13),
axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
#axis.title = element_text(face="bold", size=13),
legend.box.background = element_blank(),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size=8),
legend.title = element_text(size=12),
legend.position = "top",
legend.direction = "horizontal") +
scale_y_continuous(sec.axis = sec_axis(~.,breaks=c(0.26,0.52,0.78,1.04), # e.g. 10*0.0178 = 0.178
labels=c("10", "20", "30","40"),
name="Cumulative number of sites"))
#Ploting correlations as a function of the cumulative number of sites per group
p1 <- correlation_group80 %>% dplyr::filter(.,groups %in% 1:8) %>%
ggplot(.,aes(x=groups,y=rho_cor)) +
geom_point(shape=21,fill="black",aes(size=-log(p_val))) +
#scale_fill_gradientn(colours = viridis::viridis(20)) +
geom_line(aes(x=groups,y=rho_cor)) +
geom_bar(aes(x=groups,y=number_sites*0.0178), stat="identity", size=.1, color="black", alpha=.4) + # 0.013 = max(rho) / max(number_sites)
labs(x="Group",y=expression(rho),size="-log(P-value)") +
theme(
panel.background = element_rect(fill = "white",colour = "white"),
panel.border = element_rect(linetype = 1, fill = NA),
panel.grid.major = element_line(),
axis.text.x = element_text(face="bold", size=13),
axis.text.y = element_text(face="bold", size=13),
axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
#axis.title = element_text(face="bold", size=13),
legend.box.background = element_blank(),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size=8),
legend.title = element_text(size=12),
legend.position = "top",
legend.direction = "horizontal") +
scale_y_continuous(sec.axis = sec_axis(~.,breaks=c(0.178,0.356,0.534,0.712,0.89), # e.g. 10*0.0178 = 0.178
labels=c("10", "20", "30","40","50"),
name="Cumulative number of sites")) +
ggtitle(expression(paste("Sites grouped by ", "|",rho,"|", " >0.8")))
p2 <- correlation_group99 %>% dplyr::filter(.,groups %in% 1:12) %>%
ggplot(.,aes(x=groups,y=rho_cor)) +
geom_point(shape=21,fill="black",aes(size=-log(p_val))) +
#scale_fill_gradientn(colours = viridis::viridis(20)) +
geom_line(aes(x=groups,y=rho_cor)) +
geom_bar(aes(x=groups,y=number_sites*0.026), stat="identity", size=.1, color="black", alpha=.4) + # 0.013 = max(rho) / max(number_sites)
labs(x="Group",y=expression(rho),size="-log(P-value)") +
theme(
panel.background = element_rect(fill = "white",colour = "white"),
panel.border = element_rect(linetype = 1, fill = NA),
panel.grid.major = element_line(),
axis.text.x = element_text(face="bold", size=13),
axis.text.y = element_text(face="bold", size=13),
axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
#axis.title = element_text(face="bold", size=13),
legend.box.background = element_blank(),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size=8),
legend.title = element_text(size=12),
legend.position = "top",
legend.direction = "horizontal") +
scale_y_continuous(sec.axis = sec_axis(~.,breaks=c(0.26,0.52,0.78,1.04), # e.g. 10*0.0178 = 0.178
labels=c("10", "20", "30","40"),
name="Cumulative number of sites")) +
ggtitle(expression(paste("Sites grouped by ", "|",rho,"|", " >0.99")))
p1 + p2
df_effect
# Compute divergence at the 16 sites
group_sites <- as.numeric(gsub("V","",arrange(df_groups,desc(R2))[1:16,]$position))
# Compute divergence at the 16 sites
group_sites <- as.numeric(gsub("V","",arrange(df_anova,desc(R2))[1:16,]$position))
group_aln <- filter_alignment_by_taxa_and_sites(taxa,group_sites,aln)
pairwise_dists_group_sites <- get_pairwise_dist(group_aln,df_effect)
df_effect$DistanceFew <- pairwise_dists_group_sites[[1]]
df_models_g80
# Plot
ggplot(df_effect,aes(x=DistanceFew,y=PercentDiff),color=AAState) +
geom_point(size=4,shape=21,aes(fill = AAState)) +
scale_fill_manual(values = my_pallette) +
geom_smooth(method = lm,se = FALSE,col="grey80") +
labs(x="# Amino acid differences between ATP1A1 orthologs \n (16 sites ANOVA model)",y="Difference in effect on two backgrounds (%)",fill="AA State") +
theme(
panel.background = element_rect(fill = "white",colour = "white"),
panel.border = element_rect(linetype = 1, fill = NA),
panel.grid.major = element_line(),
axis.text.x = element_text(face="bold", size=10),
axis.text.y = element_text(face="bold", size=10),
axis.title = element_text(face="bold", size=13),
legend.box.background = element_blank(),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size=16),
legend.title = element_text(size=16)) +
annotate("text",x=5,y=180,label=expression(paste(rho, " = 0.78, P < 0.01")))
install.packages("knitr")
install.packages("knitr")
correlation_group80
# imports a fasta-formatted alignment and converts it into a matrix
import_alignment <- function(dir) {
fasta <- readLines(dir)
taxa <- fasta[2L * (1L:(length(fasta) / 2L)) - 1L]
taxa <- sub('>', '', taxa)
sequences <- fasta[2L * (1L:(length(fasta) / 2L))]
sequences <- t(vapply(strsplit(sequences, split = ''), identity, character(nchar(sequences[1L]))))
rownames(sequences) <- taxa
sequences
}
# Filter an alignment matrix to include only certain taxa and sites
filter_alignment_by_taxa_and_sites <- function(taxa,sites,aln){
m <- aln[row.names(aln) %in% taxa,]
s <- sapply(sites, function(x) paste0("V",x))
m2 <- m[,colnames(m) %in% s]
return(m2)
}
# For two taxa get the number (and percentage) of amino acid differences
get_pairwise_dist <- function(aln,df){
aa_dist <- c()
perc_dist <- c()
for(i in 1:dim(df)[1]){
t <- c(df[i,3],df[i,4])
a <- aln[row.names(aln) %in% t,]
diffs <- 0
for(j in 1:dim(a)[2]){
if(a[1,j] != a[2,j]) diffs <- diffs + 1
}
aa_dist <- c(aa_dist,diffs)
perc_dist <- c(perc_dist,((diffs/dim(a)[2])*100))
}
return(list(aa_dist,perc_dist))
}
# Creates a matrix with recoded states as 0 or 1 depending on whether a pairwise construct comparison have the same or different amino acid state at that site, respectively.
linear_model_matrix <- function(aln,df){
matrix_lm <- matrix(data = NA,nrow = dim(df)[1],ncol = dim(aln)[2]+2)
effects <- df[,8] # Y values for ANOVA
covariate <- df[,10] # covariate to correct ANOVA
matrix_lm[,1] <- effects
matrix_lm[,2] <- covariate
# For every site in alignment:
for(i in 1:dim(aln)[2]){
# If site has no variation in alignment, continue to next site:
if(length(unique(aln[,i])) == 1) next
# If more than 50% of taxa have gaps at that site, continue to next site:
if(sum(aln[,1]=="-")/length(aln[,i]) > 0.5) next
aa_states <- c()
# For every pairwise construct comparison:
for(j in 1:dim(df)[1]){
t <- c(df[j,3],df[j,4])
a <- aln[row.names(aln) %in% t, i]  # sub-alignment: compare single variable site amongst two taxa
# Is the amino acid state the same? --> Recode states as binary (0 or same, and 1 or diff.) to increase statistical power
if(a[1] == a[2])  aa_states <- c(aa_states,0)
if(a[1] != a[2])  aa_states <- c(aa_states,1)
}
# Check points to ensure there's enough power and observations to perform an ANOVA:
# If site has the same recoded state amongst focal taxa, continue (either all states are the same, or all states are different).
# If only one observation in either recoded binary state, continue.
if(length(unique(aa_states)) == 1) next
if(table(aa_states)[1] < 2) next
if(table(aa_states)[2] < 2) next
matrix_lm[,i+2] <- as.numeric(aa_states) # save recoded states to matrix
}
matrix_lm <- as.data.frame(matrix_lm)
colnames(matrix_lm) <- c("effect","covariate",sapply(seq(1,dim(aln)[2],1), function(x) paste0("V",x)))
matrix_lm <- matrix_lm[ , colSums(is.na(matrix_lm)) == 0]
return(matrix_lm)
}
# This function performs an ANOVA for every variant site between the functional constructs.
anova_per_site <- function(mat){
# mat: a matrix with amino states recoded. (output of `joint_linear_model_matrix` function)
position <- c()
effects <- mat[,1] # Y values for ANOVA
covariate <- mat[,2] # covariate to correct ANOVA
pvals <- c()
Fvals <- c()
R2 <- c()
for(i in 3:dim(mat)[2]){
# Do ANOVA at site i
aa_states <- as.factor(mat[,i])
m <- aov(effects~covariate+aa_states)
p <- summary(m)[[1]][["Pr(>F)"]][2]
f <- summary(m)[[1]][["F value"]][2]
r2 <- summary(m)[[1]][["Sum Sq"]][2]/(summary(m)[[1]][["Sum Sq"]][1]+summary(m)[[1]][["Sum Sq"]][2]+summary(m)[[1]][["Sum Sq"]][3])
position <- c(position,colnames(mat)[i])
pvals <- c(pvals,p)
Fvals <- c(Fvals,f)
R2 <- c(R2,r2)
}
df <- data.frame(position,Fvals,R2,pvals)
df$site <- match_site(df)
return(df)
}
match_site <- function(table){
sites <- c()
for(i in 1:dim(table)[1]){
position <- as.numeric(table[i,1] %>% gsub("V","",.))
site <- NA
if(position >= 14 && position <= 28) site <- position - 13
if(position >= 48 && position <= 137) site <- position - 23
if(position >= 139) site <- position - 24
sites <- c(sites,site)
}
return(sites)
}
# Extract R^2 from a linear model
get_R2 <- function(model){
ss_cov <- summary(model)[[1]][["Sum Sq"]][1]
ss_res <- tail(summary(model)[[1]][["Sum Sq"]],1)
ss_factors <- summary(model)[[1]][["Sum Sq"]][-c(which(summary(model)[[1]][["Sum Sq"]]==ss_cov),which(summary(model)[[1]][["Sum Sq"]]==ss_res))]
R2 <- sum(ss_factors)/sum(summary(model)[[1]][["Sum Sq"]])
R2
}
# Extract adjusted R^2 from a linear model (Adjusted R2 also indicates how well terms fit a curve or line, but adjusts for the number of terms in a model.)
adj_R2 <- function(model){
n <- length(model$model$effect)
k <- model$rank-1
adjr2 <- 1-(((1-get_R2(model))*(n-1))/(n-k-1))
adjr2
}
alignment <- "../data/alignments/A1-A3_AA_alignment_convergence_modified_codeml.fasta"
aln <- import_alignment(alignment)
colnames(aln) <- sapply(seq(1,1040,1), function(x) paste0("V",x))
# Import dataset with the pairwise construct comparisons (Distance and Perc_dist refer to the full protein)
df_effect <- read.csv("../data/mut_effects/Percent_change_shared_derived_state.csv",header = T)
# Names of taxa with functional information (use to make sub-alignmentes)
taxa <- c("bird|Struthio_camelus_A1","frog|Leptodactylus_macrosternumS_A1","mammal|Rattus_norvegicus_A1",
"snake|Xenodon_rhabdocephalus_A1","lizard|Tupinambis_teguxin_A1","lizard|Varanus_exanthemathicus_A1",
"snake|Rhabdophis_subminiatus_A1","mammal|Chinchilla_lanigera_A1")
# Statistical analyses:
# Correlation between percent change and number of amino acid differences for the entire protein
cor.test(df_effect$Distance,df_effect$PercentDiff)
# Plot
my_pallette <- brewer.pal(6,"Spectral")
# check for packages and install any that are missing
packages <- c("dplyr","ggplot2","RColorBrewer","patchwork","pheatmap","tidyr")
# load packages
invisible(lapply(packages, library, character.only=TRUE))
df_effect$covariate <- gsub("[A-Z]","",df_effect$AAState)
# Make sub-alignment (Taxa with functional data and full ATP1A1 sequence)
constructs_aln <- filter_alignment_by_taxa_and_sites(taxa,seq(1,dim(aln)[2],1),aln)
# Build recoded matrix
matrix_anova <- linear_model_matrix(constructs_aln,df_effect)
# Remove polymorphic positions within the first 68 sites of the alignment (poor alignment quality) and sites 111 and 122.
sites_to_remove <- c("V1","V2","V9","V10","V12","V14","V15","V16","V17","V19","V20","V21","V22","V23","V25","V26","V27","V28","V29","V30","V31","V32","V33","V34","V35","V36","V43","V44","V45","V46","V48","V56","V57","V62","V63","V69","V76","V80","V134","V146")
matrix_anova <- matrix_anova[, !(colnames(matrix_anova) %in% c(sites_to_remove))]
# Perform and ANOVA per site
df_anova <- anova_per_site(matrix_anova)
df_anova$LogP <- -log(df_anova$pvals)
df_anova <- df_anova[!(is.na(df_anova$site)),] # remove sites that have unclear match to reference sequence
matrix_sites_only <- matrix_anova[,!(colnames(matrix_anova) %in% c("effect","covariate"))]
matrix_sites_only[] <- sapply(matrix_sites_only,as.numeric)
cor_matrix <- cor(matrix_sites_only)
cor_matrix[!lower.tri(cor_matrix)] <- 0 # Set upper diagonal to zero
# Plot absolute correlation between sites to show clusters of highly colinear sites
pheatmap(abs(cor(matrix_sites_only)),cluster_rows = T, border_color="black",fontsize_row=3,fontsize_col=3,cellheight=2,main = "Clusters of polymorphic sites")
matrix_anova_indep_1 <- matrix_sites_only[, !apply(cor_matrix, 2, function(x) any(abs(x) > 0.8, na.rm = TRUE))] # Selects an arbritary site as representatives
matrix_anova_indep_1$effect <- matrix_anova$effect
matrix_anova_indep_1$covariate <- matrix_anova$covariate
# Remove highly colinear variables (sites with an absolute correlation > 0.99)
matrix_anova_indep_2 <- matrix_sites_only[, !apply(cor_matrix, 2, function(x) any(abs(x) > 0.99, na.rm = TRUE))]
matrix_anova_indep_2$effect <- matrix_anova$effect
matrix_anova_indep_2$covariate <- matrix_anova$covariate
# Sort ANOVA results by the marginal R^2
df_anova <- arrange(df_anova,desc(R2))
# Add group category to sites: grouped by the cluster they belong to
group_sites1 <- matrix_anova_indep_1 %>% select(-c(effect,covariate)) %>% with(colnames(.))
group_sites1 <- group_sites1[order(match(group_sites1,df_anova$position[which(df_anova$position %in% group_sites1)]))] # order representative sites based on R2
group1 <- seq(1,length(group_sites1),1)
group_sites1 <- data.frame(position=group_sites1,group80=group1)
group_sites2 <- matrix_anova_indep_2 %>% select(-c(effect,covariate)) %>% with(colnames(.))
group_sites2 <- group_sites2[order(match(group_sites2,df_anova$position[which(df_anova$position %in% group_sites2)]))] # order representative sites based on R2
group2 <- seq(1,length(group_sites2),1)
group_sites2 <- data.frame(position=group_sites2,group99=group2)
df_anova <- df_anova %>% full_join(.,group_sites1,by="position") %>% full_join(.,group_sites2,by="position") %>% fill(group80,.direction="up") %>% fill(group99,.direction="up") %>% mutate(group80 = replace_na(group80,24))
# Show ANOVA table with assigned groups
kable(df_anova)
# Show ANOVA table with assigned groups
knitr::kable(df_anova)
# Manhattan plot-like plot showing the effect per site colored by colinear group
ggplot(df_anova,aes(x=factor(site),y=LogP,fill=group80)) +
geom_bar(stat = "identity") +
#scale_fill_manual(values = group_cols) +
scale_fill_gradientn(colours = terrain.colors(27)) +
xlab("Polymorphic sites") +
ylab(paste("-log(P)")) +
theme(
panel.background = element_rect(fill = "white",colour = "white"),
panel.border = element_rect(linetype = 1, fill = NA),
panel.grid.major = element_line(),
axis.text.x = element_text(face="bold", size=5,angle = 90, vjust = 0.5, hjust=1),
axis.text.y = element_text(face="bold", size=10),
axis.title = element_text(face="bold", size=13)) +
geom_hline(yintercept = -log(0.01),color="red",linetype='dotted') +
geom_hline(yintercept = -log(0.05),color="blue",linetype='dotted') +
annotate("text",x=7,y=4.7,label="P < 0.01") +
annotate("text",x=7,y=3.1,label="P < 0.05")
sorted_sites_by_R2 <- arrange(df_anova,desc(R2))$position
independent_sorted_sites_by_R2_g80 <- sorted_sites_by_R2[sorted_sites_by_R2 %in% colnames(matrix_anova_indep_1)]
independent_sorted_sites_by_R2_g99 <- sorted_sites_by_R2[sorted_sites_by_R2 %in% colnames(matrix_anova_indep_2)]
# Compute model statistics for increasingly nested linear models (sites with an absolute correlation > 0.8)
r2_per_group <- c()
adj_r2 <- c()
group <- c()
var <- c()
aic <- c()
formulas <- list()
for(i in 1:length(independent_sorted_sites_by_R2_g80)){
var <- c(var,independent_sorted_sites_by_R2_g80[i])
exp_var <- sapply(var, function(x) paste0("+",x))
formula = as.formula(paste0("effect", " ~ ", "covariate", paste0(exp_var,collapse = " ")))
formulas[[i]] <- formula
m <- aov(formula,data=matrix_anova_indep_1)
r2_per_group <- c(r2_per_group,get_R2(m))
adj_r2 <- c(adj_r2,adj_R2(m))
aic <- c(aic,AIC(m))
group <- c(group,i)
}
# LRT for all models
p_LRT <- c(NA)
for(i in 2:length(formulas)-1){
pval <- anova(aov(formulas[[i]],data=matrix_anova_indep_1),aov(formulas[[i+1]],data=matrix_anova_indep_1),test="LRT")[[5]][2]
p_LRT <- c(p_LRT,pval)
}
df_models_g80 <- data.frame(group,r2_per_group,adj_r2,p_LRT,aic)
#kable(df_models_g80)
#paged_table(df_models_g80)
# Compute model statistics for increasingly nested linear models (sites with an absolute correlation > 0.99)
r2_per_group <- c()
adj_r2 <- c()
group <- c()
var <- c()
aic <- c()
formulas <- list()
for(i in 1:length(independent_sorted_sites_by_R2_g99)){
var <- c(var,independent_sorted_sites_by_R2_g99[i])
exp_var <- sapply(var, function(x) paste0("+",x))
formula = as.formula(paste0("effect", " ~ ", "covariate", paste0(exp_var,collapse = " ")))
formulas[[i]] <- formula
m <- aov(formula,data=matrix_anova_indep_2)
r2_per_group <- c(r2_per_group,get_R2(m))
adj_r2 <- c(adj_r2,adj_R2(m))
aic <- c(aic,AIC(m))
group <- c(group,i)
}
# LRT for all models
p_LRT <- c(NA)
for(i in 2:length(formulas)-1){
pval <- anova(aov(formulas[[i]],data=matrix_anova_indep_2),aov(formulas[[i+1]],data=matrix_anova_indep_2),test="LRT")[[5]][2]
p_LRT <- c(p_LRT,pval)
}
df_models_g99 <- data.frame(group,r2_per_group,adj_r2,p_LRT,aic)
label1a <- "Best model: Model B\n (groups 1-2: 16 sites)"
label1b <- expression(paste("R"^2,"= 0.775"))
p1 <- ggplot(df_models_g80,aes(x=group,y=r2_per_group)) + geom_line(size=1.3) + theme_classic() +
theme(axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title = element_text(face="bold", size=13)) +
xlab("Group of colinear sites") +
ylab(expression(paste("R"^2," of nested models"))) + geom_vline(xintercept = 2,linetype="dashed",color="red") +
ggtitle(expression(paste("Sites grouped by ", "|",rho,"|", " >0.8")))  +
annotate("text",x=11,y=0.75,label=label1a) + annotate("text",x=11,y=0.71,label=label1b)
label2a <- "Best model: Model D\n (groups 1-4: 16 sites)"
label2b <- expression(paste("R"^2,"= 0.827"))
p2 <- ggplot(df_models_g99,aes(x=group,y=r2_per_group)) + geom_line(size=1.3) + theme_classic() +
theme(axis.text.x = element_text(size=10),
axis.text.y = element_text(size=10),
axis.title = element_text(face="bold", size=13)) +
xlab("Group of colinear sites") +
ylab(expression(paste("R"^2," of nested models"))) + geom_vline(xintercept = 4,linetype="dashed",color="red") +
ggtitle(expression(paste("Sites grouped by ", "|",rho,"|", " >0.99"))) +
annotate("text",x=20,y=0.8,label=label2a) + annotate("text",x=20,y=0.76,label=label2b)
p1 + p2
##Effects of divergence at sites in group 1 through X --> Fit correlations for each nested model
correlation_per_group <- function(df,grouping,bootstrap){
if(grouping == 80){
groups <- unique(df$group80)
column <- df$group80
}
if(grouping == 99){
groups <- unique(df$group99)
column <- df$group99
}
rho_cor <- c()
number_sites <- c()
p_val <- c()
for(i in 1:length(groups)){
group.df <- df[column %in% 1:groups[i],]
group.sites <- as.numeric(gsub("V","",arrange(group.df,desc(R2))$position))
# New cumulative subalignment
group_aln <- filter_alignment_by_taxa_and_sites(taxa,group.sites,aln)
pairwise_dists_group_sites <- get_pairwise_dist(group_aln,df_effect)
number_sites <- c(number_sites,dim(group_aln)[2])
m <- cor.test(df_effect$PercentDiff,pairwise_dists_group_sites[[1]],method="pearson")
rho_cor <- c(rho_cor,m$estimate)
# Compute a p-value for each correlation based on permutation
null_cor_AAdist <- c()
for(j in 1:bootstrap){
perm_effects <- sample(df_effect$PercentDiff,size = length(df_effect$PercentDiff),replace = T)
m.boot <- cor.test(pairwise_dists_group_sites[[1]],perm_effects,method="pearson")
null_cor_AAdist <- c(null_cor_AAdist,m.boot$estimate)
}
p <- sum(null_cor_AAdist >= m$estimate) / bootstrap
p_val <- c(p_val,p)
}
data <- data.frame(groups,number_sites,rho_cor,p_val)
data
}
correlation_group80 <- correlation_per_group(df = df_anova,grouping = 80,bootstrap = 1000)
correlation_group99 <- correlation_per_group(df = df_anova,grouping = 99, bootstrap = 1000)
correlation_group80 %>% dplyr::filter(.,groups %in% 1:8) %>%
ggplot(.,aes(x=groups,y=rho_cor)) +
geom_point(shape=21,fill="red",color="black",aes(size=-log(p_val))) +
#scale_fill_gradientn(colours = viridis::viridis(20)) +
geom_line(aes(x=groups,y=rho_cor,color="red")) +
geom_bar(aes(x=groups,y=number_sites*0.0178), stat="identity", size=.1, color="black", alpha=.4) + # 0.013 = max(rho) / max(number_sites)
labs(x="Group",y=expression(paste(rho,": divergence at sites and effect")),size="-log(P-value)") +
theme(
panel.background = element_rect(fill = "white",colour = "white"),
panel.border = element_rect(linetype = 1, fill = NA),
panel.grid.major = element_line(),
axis.text.x = element_text(face="bold", size=13),
axis.text.y = element_text(face="bold", size=13),
axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
#axis.title = element_text(face="bold", size=13),
legend.box.background = element_blank(),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size=8),
legend.title = element_text(size=12),
legend.position = "top",
legend.direction = "horizontal",
axis.line.x.left=element_line(color="red")) +
scale_y_continuous(sec.axis = sec_axis(~.,breaks=c(0.178,0.356,0.534,0.712,0.89), # e.g. 10*0.0178 = 0.178
labels=c("10", "20", "30","40","50"),
name="Cumulative number of sites")) +
ggtitle(expression(paste("Sites grouped by ", "|",rho,"|", " >0.8")))
correlation_group80 %>% dplyr::filter(.,groups %in% 1:8) %>%
ggplot(.,aes(x=groups,y=rho_cor)) +
geom_point(shape=21,fill="red",color="black",aes(size=-log(p_val))) +
#scale_fill_gradientn(colours = viridis::viridis(20)) +
geom_line(aes(x=groups,y=rho_cor,color="red")) +
geom_bar(aes(x=groups,y=number_sites*0.0178), stat="identity", size=.1, color="black", alpha=.4) + # 0.013 = max(rho) / max(number_sites)
labs(x="Group",y=expression(paste(rho,": divergence at sites and effect")),size="-log(P-value)") +
theme(
panel.background = element_rect(fill = "white",colour = "white"),
panel.border = element_rect(linetype = 1, fill = NA),
panel.grid.major = element_line(),
axis.text.x = element_text(face="bold", size=13),
axis.text.y = element_text(face="bold", size=13, color="red"),
axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14,color="red"),
#axis.title = element_text(face="bold", size=13),
legend.box.background = element_blank(),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size=8),
legend.title = element_text(size=12),
legend.position = "top",
legend.direction = "horizontal") +
scale_y_continuous(sec.axis = sec_axis(~.,breaks=c(0.178,0.356,0.534,0.712,0.89), # e.g. 10*0.0178 = 0.178
labels=c("10", "20", "30","40","50"),
name="Cumulative number of sites")) +
ggtitle(expression(paste("Sites grouped by ", "|",rho,"|", " >0.8")))
correlation_group80 %>% dplyr::filter(.,groups %in% 1:8) %>%
ggplot(.,aes(x=groups,y=rho_cor)) +
geom_point(shape=21,fill="black",aes(size=-log(p_val))) +
#scale_fill_gradientn(colours = viridis::viridis(20)) +
geom_line(aes(x=groups,y=rho_cor)) +
geom_bar(aes(x=groups,y=number_sites*0.0178), stat="identity", size=.1, color="black", alpha=.4) + # 0.013 = max(rho) / max(number_sites)
labs(x="Group",y=expression(paste(rho,": divergence at sites and effect")),size="-log(P-value)") +
theme(
panel.background = element_rect(fill = "white",colour = "white"),
panel.border = element_rect(linetype = 1, fill = NA),
panel.grid.major = element_line(),
axis.text.x = element_text(face="bold", size=13),
axis.text.y = element_text(face="bold", size=13),
axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
#axis.title = element_text(face="bold", size=13),
legend.box.background = element_blank(),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size=8),
legend.title = element_text(size=12),
legend.position = "top",
legend.direction = "horizontal") +
scale_y_continuous(sec.axis = sec_axis(~.,breaks=c(0.178,0.356,0.534,0.712,0.89), # e.g. 10*0.0178 = 0.178
labels=c("10", "20", "30","40","50"),
name="Cumulative number of sites")) +
ggtitle(expression(paste("Sites grouped by ", "|",rho,"|", " >0.8")))
group_sites <- as.numeric(gsub("V","",arrange(df_anova,desc(R2))[1:16,]$position))
group_aln <- filter_alignment_by_taxa_and_sites(taxa,group_sites,aln)
pairwise_dists_group_sites <- get_pairwise_dist(group_aln,df_effect)
df_effect$DistanceFew <- pairwise_dists_group_sites[[1]]
# Correlation
cor.test(df_effect$DistanceFew,df_effect$PercentDiff)
df_models_g80
# Show first 10 models:
knitr::kable(head(df_models_g80,10))
# Show first 10 models:
knitr::kable(head(df_models_g99,10))
LETTERS[1:length(group)]
group
model <- make.unique(rep(letters, length.out = length(group)), sep='')
model
